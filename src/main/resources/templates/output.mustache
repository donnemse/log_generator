<!doctype html>
<html lang="ko">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="A layout example that shows off a responsive logger layout.">
    <title>ILogger</title>
    {{>import}}
    <script src="https://code.highcharts.com/highcharts.js"></script>


    <style rel="stylesheet">
        .change-state {
            height: 70px !important;
        }
    </style>
    <script type="text/javascript">
        function refreshList(){
            $(".list").empty();
            axios({
                url: '/api/outputs',
                method: 'get'
            }).then(function (response) {
                let i = 0;
                $.each(response.data.data, function(k, v) {
                    let $div = $(
                        "<div class=\"menu-item pure-g " + (i++ == 0? "menu-item-selected menu-item-unread": "") + "\">" +
                        "   <div class=\"pure-u-1\">" +
                        "       <h5 class=\"menu-name\">" + v.type + ": " + v.name + "</h5>" +
                        "       <h6 class=\"menu-subject\">" +
                        "           Max Queue: " + v.max_queue_size + "<br />Current Queue: " + v.current_queue_size +
                        "       </h6>" +
                        "   </div>" +
                        "   <div class=\"pure-u-1-8 change-state\">" +
                        "       <div class=\"form-check form-switch\">" +
                        "           <input class=\"form-check-input checkbox-change-state\" type=\"checkbox\" role=\"switch\" " + (v.status == 1? "checked": "") + ">" +
                        "       </div>" +
                        "   </div>" +
                        "</div>");
                    $div.data("output-id", v.id);
                    $(".list").append($div);
                });
            }).catch(function (error) {
                console.log(error);
            })
            .then(function () {
                $(".menu-item").eq(0).trigger("click");
            });
        };
        
        function cleanOutputJson(obj) {
            for(prop in obj) {
                if (prop == "cnt" || prop == "last_check_time" || prop == "deleted"){
                    delete obj[prop];
                } else if(typeof(obj[prop]) == "object"){
                    cleanOutputJson(obj[prop]);
                } else {
                    
                    if(prop.indexOf("_byte") > -1) {
                        obj[prop] = getByteStr(obj[prop])
                    } else if(prop.indexOf("_time") > -1) {
                        if (prop == "running_time") {
                            obj[prop] = getRunningTimeStr(obj[prop]);
                        } else {
                            obj[prop] = moment(obj[prop]).format("YYYY/MM/DD HH:mm:ss")
                        }
                    } else if(typeof(obj[prop]) == "number"){
                        obj[prop] = parseInt(obj[prop]);
                    }
                }
            }
        }
        
        function getRunningTimeStr(time) {
            let result = "";
            let map = {
                "일": 24,
                "시간": 60,
                "분": 60,
                "초": 1000
            };
            let millis = 1000 * 60 * 60 * 24;
            
            for (let key of Object.keys(map)) {
                if (parseInt(time / millis) > 0) {
                    result += " " + parseInt(time / millis) + key;
                }
                time = time % millis;
                millis = millis / map[key];
            }
            return result.trim();
        }
        
        function getByteStr(val) {
            if (val >= 1024 ** 3) {
                return (parseInt((val / (1024 ** 3)) * 10) / 10) + "GB"; 
            } else if (val >= 1024 ** 2) {
                return (parseInt((val / (1024 ** 2)) * 10) / 10) + "MB"; 
            } else if (val >= 1024 ** 1) {
                return (parseInt((val / (1024 ** 1)) * 10) / 10) + "KB"; 
            } else {
                return val;
            }
        }
        
        $(function() {
            var editor = ace.edit("editor");
            editor.session.setMode("ace/mode/yaml");
            editor.setTheme("ace/theme/tomorrow");
            editor.setReadOnly(false);
            editor.setFontSize(15);
            refreshList();
            
            $(document).on('click',".open-port-button",function (e) {
                let port = $(".pure-form").find("#new_port").val();
                let max_queue = $(".pure-form").find("#new_max_queue").val();
                if (port == '') {
                    port = "3303";
                }
                if (max_queue == '') {
                    max_queue = "10000";
                }
                axios({
                    url: "/api/output/open",
                    method: "post",
                    data: {
                        port: port,
                        max_queue_size: max_queue
                    }
                }).then(function (response) {
                    if (response.data.status == 200) {
                        $("#new_output_modal").find("form")[0].reset()
                        $("#new_output_modal").modal("hide");
                        refreshList();
                        $.notify({message: response.data.msg},{type: 'success'});
                    } else {
                        $.notify({message: response.data.msg},{type: 'danger'});
                    }
                }).catch(function (error) {
                    console.log(error);
                }).then(function () {
                    // always executed
                });
            });

            $(document).on('click',".change-state .checkbox-change-state",function (e) {
                $checkbox = $(this);
                let id = $(e.target).parents(".menu-item").data("output-id");
                let flag = $checkbox.is(":checked");
                console.log(flag)
                axios({
                    url: "/api/outputs/" + (flag? "start": "stop") + "/" + id,
                    method: "patch"
                }).then(function (response) {
                    console.log(response)
                    if (response.data.data) {
                        $.notify({message: response.data.msg},{type: 'success'});
                    } else {
                        $.notify({message: response.data.msg},{type: 'danger'});
                    }
                }).catch(function (error) {
                    console.log(error);
                }).then(function () {
                    // always executed
                });
            });
            
            /* $(document).on("click", ".output-close-button", function (e) {
                axios({
                    url: '/api/output/sclose/' + $(e.target).parents(".menu-item").data("output_id"),
                    method: "post"
                }).then(function (response) {
                    if (response.data.status == 200) {
                        $.notify({message: response.data.msg},{type: 'success'});
                        refreshList();
                    } else {
                        $.notify({message: response.data.msg},{type: 'danger'});
                    }
                })
                .catch(function (error) {
                    // handle error
                    console.log(error);
                })
                .then(function () {
                    // always executed
                });
            }); */
            
            
            $(document).on("click", ".menu-item", function (e) {
                if ($(e.target).hasClass("button-change-state")) {
                    return;
                }
                $(".menu-item").removeClass("menu-item-selected menu-item-unread");
                $(e.currentTarget).addClass("menu-item-selected menu-item-unread");
                
                axios.get('/api/outputs/' + $(e.currentTarget).data("output-id"))
                .then(function (response) {
                    let data = response.data.data;
                    // data.clients = ["client1", "client2"];
                    cleanOutputJson(data);
                    editor.setValue(JSON.stringify(data, null, '\t'), -1)
                    let title = "";
                    if (data.type == "sparrow") {
                        title = "Port: " + data.info.port;
                    } else if (data.type == "file") {
                        title = "File: " + data.info.output_type;
                    }
                    let $div = $(
                        "<h2 class=\"logger-content-title\">" +
                        "   <label>" + title + "</label>" +
                        "</h2>" +
                        "<p class=\"logger-content-subtitle\">" +
                            "Opened by <a>" + data.ip + "</a> at <span>" + moment(data.started_time).format("YYYY/MM/DD HH:mm:ss") + "</span>" +
                        "</p>" +
                        "<input type=\"hidden\" id=\"selected_id\" value=\"" + data.id + "\" />" +
                        "<input type=\"hidden\" id=\"selected_status\" value=\"" + data.status + "\" />"
                    );
                    $(".logger-info").html($div);

                    if (data.clients != null && data.clients.length > 0) {

                        $(".clients").empty();
                        $.each(data.clients, function(i, c) {
                            $(".clients").append(
                                "<button client-id=\"" + c + "\" type=\"button\" class=\"btn btn-primary position-relative stop-client" + (i > 0? " ms-3": "") + "\">"
                                + c
                                + "<span class=\"btn-close position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger\">"
                                + "<span class=\"visually-hidden\">a</span>"
                                + "</span>"
                                + "</button>" );
                        });
                    }
                })
                .catch(function (error) {
                    // handle error
                    console.log(error);
                })
                .then(function () {
                    // always executed
                });
                
                axios.get('/api/outputs/eps/producer/' + $(e.currentTarget).data("output-id"))
                .then(function (response) {
                	makeChart(response.data.data)
                })
                .catch(function (error) {
                    // handle error
                    console.log(error);
                })
                .then(function () {
                    // always executed
                });
            });
            
            
        });
        
        function makeChart(data) {
        	// console.log(data)
        	var chart = Highcharts.chart('chart', {
                chart: {
                    type: 'spline',
                    height: 350
                },
                height: "350px",
                title: {
                    text: ''
                },
                yAxis: {
                    title: {
                        text: 'Producer EPS'
                    },
                    tickInterval: 1
                },
                xAxis: {
                    type: 'datetime',
                },
                tooltip: {
                    split: true,
                    valueDecimals: 0,
                    valueSuffix: ''
                },
                plotOptions: {
                    series: {
                        marker: {
                            enabled: false
                        },
                        cursor: 'pointer',
                        point: {
                            events: {}
                        }
                    }
                },
                series: data
              });
        }
    </script>
</head>
<body>


<!-- History -->
<div id="layout" class="content pure-g">
    {{>nav}}
    <div class="pure-u-1">
        <div class="pure-u-1 list"></div>
        <div class="pure-u-1 main">
            <div class="logger-content">
                <div class="logger-content-header pure-g">
                    <div class="logger-info pure-u-1-2"></div>
                    <div class="logger-content-controls pure-u-1-2">
                    </div>
                </div>
    
                <div class="logger-content-body">
                    <div class="pure-g">
                        <div class="pure-u-1 clients" style="padding-bottom: 10px;"></div>
                        <div id="editor" class="pure-u-1-2"></div>
                        <div id="chart" class="pure-u-1-2"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="new_output_modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">TCP 소켓 추가</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form class="pure-form pure-form-stacked">
                    <label for="new_port">Port</label>
                    <input id="new_port" type="text" placeholder="3303">
                    <label for="new_max_queue">최대큐사이즈</label>
                    <input id="new_max_queue" type="text" placeholder="10000">
                    <!-- <label for="state">State</label>
                    <select id="state">
                        <option>AL</option>
                        <option>CA</option>
                        <option>IL</option>
                    </select>
                    <label class="pure-checkbox">
                    <input type="checkbox"> Remember me
                    </label> -->
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="pure-button" data-bs-dismiss="modal">Close</button>
                <button type="button" class="pure-button pure-button-primary open-port-button">Open</button>
            </div>
        </div>
    </div>
</div>
</body>
</html>