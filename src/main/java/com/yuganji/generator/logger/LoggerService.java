package com.yuganji.generator.logger;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.yuganji.generator.controller.ImportFromModel;
import com.yuganji.generator.db.Logger;
import com.yuganji.generator.db.LoggerRepository;
import com.yuganji.generator.model.LoggerDto;
import com.yuganji.generator.model.SingleObjectResponse;
import lombok.extern.log4j.Log4j2;
import org.apache.zookeeper.KeeperException;
import org.apache.zookeeper.ZooKeeper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@Log4j2
public class LoggerService {
    private final int SAMPLE_CNT = 100;
    private Map<Integer, LoggerDto> cache;

    @Autowired
    private LoggerRepository loggerRepository;

    @PostConstruct
    private void init() {
        this.cache = loggerRepository.findAll().stream().collect(
                Collectors.toMap(Logger::getId, x -> x.toDto()));
    }

    public LoggerDto get(int id) {
        return this.cache.get(id);
    }
    
    public LoggerDto get(int id, String ip) {
        this.cache.get(id).setIp(ip);
        return this.cache.get(id);
    }
    
    public Map<Integer, LoggerDto> list() {
        return this.cache;
    }

    public SingleObjectResponse add(Logger logger) {
        SingleObjectResponse res = new SingleObjectResponse(HttpStatus.OK.value());
        try {
            logger = loggerRepository.save(logger);
            LoggerDto loggerDto = logger.toDto();
            this.cache.put(logger.getId(), loggerDto);
            res.setMsg("Successfully saved " + logger.getName());
            res.setData(loggerDto);
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            res.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
            res.setMsg(e.getMessage());
        }
        return res;
    }

    public SingleObjectResponse modify(Logger logger) {
        String msg = "logger was modified. " + logger.getName();
        SingleObjectResponse res = new SingleObjectResponse(HttpStatus.OK.value(), msg);
        if (!this.cache.containsKey(logger.getId())) {
            res.setMsg("can not found logger. " + logger.getName());
            res.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
            return res;
        } else if (this.cache.get(logger.getId()).getStatus() == 1) {
            res.setMsg(logger.getName() + " is running now. stop it first.");
            res.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
            return res;
        }
        try {
            loggerRepository.save(logger);
            this.cache.put(logger.getId(), logger.toDto());
            res.setMsg(msg);
            res.setStatus(HttpStatus.OK.value());
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            res.setMsg(e.getMessage());
            res.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
        }
        res.setData(logger);
        return res;
    }

    public SingleObjectResponse remove(Logger logger) {
        SingleObjectResponse res = new SingleObjectResponse(HttpStatus.OK.value());
        try {
            LoggerDto info = this.cache.get(logger.getId());
            res.setData(info.toEntity());
            String msg = "logger was removed. " + info.getName();
            res.setMsg(msg);
            loggerRepository.deleteById(logger.getId());
            this.cache.remove(logger.getId());
        } catch (Exception e) {
            res.setMsg(e.getMessage());
            res.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
        }
        return res;
    }
    
    public List<Map<String, Object>> sample(Logger logger) {
        List<Map<String, Object>> list = new ArrayList<>();
        try {
            LoggerDto dto =  logger.toDto();
            for (int i = 0; i < SAMPLE_CNT; i++) {
                list.add(dto.getDetail().generateLog());
            }
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            StringWriter sw = new StringWriter();
            e.printStackTrace(new PrintWriter(sw));
            Map<String, Object> map = new HashMap<>();
            map.put("error", sw.toString());
            list.add(map);
        }
        return list;
    }

    public SingleObjectResponse importFromModel(ImportFromModel importFromModel) {
        ZooKeeper zoo = null;
        SingleObjectResponse response = new SingleObjectResponse(200, "generated by engine");

        try {
            zoo = new ZooKeeper(importFromModel.getZookeeperUrl(), 3000, null);
            byte[] data = zoo.getData("/gauss/engines/" + importFromModel.getEngineId(), false, null);

            JsonObject engine = JsonParser.parseString(new String(data)).getAsJsonObject();
            Logger logger = Logger.LoggerBuilder()
                    .yamlStr(this.generatrYamlFromEngineInfo(engine))
                    .build();
            response.setData(logger);

        } catch (IOException e) {
            response.setStatus(500);
            response.setMsg(e.getMessage());
            log.error(e.getMessage(), e);
        } catch (InterruptedException e) {
            response.setStatus(500);
            response.setMsg(e.getMessage());
            log.error(e.getMessage(), e);
        } catch (KeeperException e) {
            response.setStatus(500);
            response.setMsg(e.getMessage());
            log.error(e.getMessage(), e);
        } finally {
            if (zoo != null) {
                try {
                    zoo.close(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();

                }
            }
        }
        return response;
    }

    private String generatrYamlFromEngineInfo(JsonObject engine) {
        JsonObject trainingColumns = engine.get("training_columns").getAsJsonObject();
        String engineId = engine.get("engine_id").getAsString();
        StringBuilder sb = new StringBuilder();
        sb.append("########################################################").append('\n');
        sb.append("# This is generated by Engine information on Zookeeper #").append('\n');
        sb.append("# Please Check it before using it.                     #").append('\n');
        sb.append("#                                            - yuganji #").append('\n');
        sb.append("########################################################").append("\n\n");

        sb.append("log: ").append(engineId).append('\n');
        if (engine.has("logtype")) {
            sb.append("logtype: ");
            sb.append(engine.get("logtype").getAsString()).append('\n');
        }
        sb.append("raw: import from ").append(engineId).append('\n');
        sb.append("data:").append('\n');
        for (Map.Entry<String, JsonElement> entry: trainingColumns.entrySet()) {
            sb.append("    ");
            sb.append(entry.getKey() + ":").append('\n');
            sb.append("        ");
            if (entry.getValue().getAsString().equals("continuous")) {
                sb.append("type: ").append("int").append('\n');
                sb.append("        ");
                sb.append("values: ").append('\n');
                sb.append("            ").append("1-10: 1").append('\n');
            } else if (entry.getValue().getAsString().equals("categorical")) {
                sb.append("type: ").append("str").append('\n');
                sb.append("        ");
                sb.append("values: ").append('\n');
                sb.append("            ").append("0: 0.2").append('\n');
                sb.append("            ").append("1: 0.8").append('\n');
            } else {
                sb.append("type: ").append(entry.getValue().getAsString()).append('\n');
                sb.append("        ");
                sb.append("values: ").append('\n');
                sb.append("            #####################################").append('\n');
                sb.append("            #").append("Please add values by your data type").append('\n');
                sb.append("            #####################################").append('\n');
            }
            sb.append('\n');
        }
        return sb.toString();
    }
}
